{"version":3,"sources":["assets/Script/pool.js"],"names":["cc","Class","extends","Component","properties","enemyPrefab","Prefab","onLoad","enemyPool","NodePool","initCount","i","enemy","instantiate","put","console","log","size","enemy1","enemy2","enemy3","get","setPosition","node","addChild","update","dt"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGNC,gBAAY;AACXC,qBAAaL,GAAGM;AADL,KAHN;AAMTC,YAAQ,kBAAY;AAChB,aAAKC,SAAL,GAAiB,IAAIR,GAAGS,QAAP,EAAjB;AACA,YAAIC,YAAY,CAAhB;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,SAApB,EAA+B,EAAEC,CAAjC,EAAoC;AAChC,gBAAIC,SAAQZ,GAAGa,WAAH,CAAe,KAAKR,WAApB,CAAZ,CADgC,CACc;AAC9C,iBAAKG,SAAL,CAAeM,GAAf,CAAmBF,MAAnB,EAFgC,CAEL;AAC9B;;AAEDG,gBAAQC,GAAR,CAAY,KAAKR,SAAL,CAAeS,IAAf,EAAZ;;AAEA,YAAIC,SAAS,IAAb;AACI,YAAIC,SAAS,IAAb;AACI,YAAIC,SAAS,IAAb;AACR,YAAI,KAAKZ,SAAL,CAAeS,IAAf,KAAwB,CAA5B,EAA+B;AAAE;AAC7BC,qBAAS,KAAKV,SAAL,CAAea,GAAf,EAAT;AACAF,qBAAS,KAAKX,SAAL,CAAea,GAAf,EAAT;AACAD,qBAAS,KAAKZ,SAAL,CAAea,GAAf,EAAT;AACH,SAJD,MAIO;AAAE;AACLT,oBAAQZ,GAAGa,WAAH,CAAe,KAAKR,WAApB,CAAR;AACH;AACDa,eAAOI,WAAP,CAAmB,GAAnB,EAAuB,GAAvB;AACAH,eAAOG,WAAP,CAAmB,GAAnB,EAAuB,GAAvB;AACA,aAAKC,IAAL,CAAUC,QAAV,CAAmBN,MAAnB,EAtBgB,CAsBY;AAC5B,aAAKK,IAAL,CAAUC,QAAV,CAAmBL,MAAnB;AACA,aAAKI,IAAL,CAAUC,QAAV,CAAmBJ,MAAnB;AACA;AACAL,gBAAQC,GAAR,CAAY,KAAKR,SAAL,CAAeS,IAAf,EAAZ;AAEH,KAlCQ;;AAoCL;AACAQ,YAAQ,gBAAUC,EAAV,EAAc,CAErB;AAvCI,CAAT","file":"unknown","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n   properties: {\n    enemyPrefab: cc.Prefab\n},\nonLoad: function () {\n    this.enemyPool = new cc.NodePool();\n    let initCount = 5;\n    for (let i = 0; i < initCount; ++i) {\n        let enemy = cc.instantiate(this.enemyPrefab); // 创建节点\n        this.enemyPool.put(enemy); // 通过 putInPool 接口放入对象池\n    }\n    \n    console.log(this.enemyPool.size())\n    \n    let enemy1 = null;\n        let enemy2 = null;\n            let enemy3 = null;\n    if (this.enemyPool.size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\n        enemy1 = this.enemyPool.get();\n        enemy2 = this.enemyPool.get();\n        enemy3 = this.enemyPool.get();\n    } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\n        enemy = cc.instantiate(this.enemyPrefab);\n    }\n    enemy1.setPosition(100,100);\n    enemy2.setPosition(200,200);\n    this.node.addChild(enemy1); // 将生成的敌人加入节点树\n    this.node.addChild(enemy2);\n    this.node.addChild(enemy3);\n    //enemy.getComponent('Enemy').init(); //接下来就可以调用 enemy 身上的脚本进行初始化\n    console.log(this.enemyPool.size())\n    \n},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        \n    },\n});\n"]}